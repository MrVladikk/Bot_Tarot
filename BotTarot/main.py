import asyncio
from telebot.async_telebot import AsyncTeleBot
from telebot import types
import random
import os
from mistralai import Mistral
import requests
import time

API_TOKEN = ''
MISTRAL_API_KEY =''
model = "pixtral-12b-2409"
bot = AsyncTeleBot(API_TOKEN)
CARDS_FOLDER = 'cards'
TAROT_DECK = ["–®—É—Ç", "–ú–∞–≥", "–í–µ—Ä—Ö–æ–≤–Ω–∞—è –ñ—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç—Ä–∏—Ü–∞", "–ò–º–ø–µ—Ä–∞—Ç–æ—Ä",
    "–ò–µ—Ä–æ—Ñ–∞–Ω—Ç", "–í–ª—é–±–ª–µ–Ω–Ω—ã–µ", "–ö–æ–ª–µ—Å–Ω–∏—Ü–∞", "–°–∏–ª–∞", "–û—Ç—à–µ–ª—å–Ω–∏–∫",
    "–ö–æ–ª–µ—Å–æ –§–æ—Ä—Ç—É–Ω—ã", "–°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ—Å—Ç—å", "–ü–æ–≤–µ—à–µ–Ω–Ω—ã–π", "–°–º–µ—Ä—Ç—å", 
    "–£–º–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å", "–î—å—è–≤–æ–ª", "–ë–∞—à–Ω—è", "–ó–≤–µ–∑–¥–∞", "–õ—É–Ω–∞", 
    "–°–æ–ª–Ω—Ü–µ", "–°—É–¥", "–ú–∏—Ä","–¢—É–∑ –ñ–µ–∑–ª–æ–≤", "–î–≤–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "–¢—Ä–æ–π–∫–∞ –ñ–µ–∑–ª–æ–≤", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–°–µ–º–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ñ–µ–∑–ª–æ–≤", 
    "–î–µ–≤—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤", "–î–µ—Å—è—Ç–∫–∞ –ñ–µ–∑–ª–æ–≤", "–ü–∞–∂ –ñ–µ–∑–ª–æ–≤", "–†—ã—Ü–∞—Ä—å –ñ–µ–∑–ª–æ–≤", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ñ–µ–∑–ª–æ–≤", "–ö–æ—Ä–æ–ª—å –ñ–µ–∑–ª–æ–≤","–¢—É–∑ –ö—É–±–∫–æ–≤", "–î–≤–æ–π–∫–∞ –ö—É–±–∫–æ–≤", "–¢—Ä–æ–π–∫–∞ –ö—É–±–∫–æ–≤", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–°–µ–º–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ö—É–±–∫–æ–≤", 
    "–î–µ–≤—è—Ç–∫–∞ –ö—É–±–∫–æ–≤", "–î–µ—Å—è—Ç–∫–∞ –ö—É–±–∫–æ–≤", "–ü–∞–∂ –ö—É–±–∫–æ–≤", "–†—ã—Ü–∞—Ä—å –ö—É–±–∫–æ–≤", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ö—É–±–∫–æ–≤", "–ö–æ—Ä–æ–ª—å –ö—É–±–∫–æ–≤","–¢—É–∑ –ú–µ—á–µ–π", "–î–≤–æ–π–∫–∞ –ú–µ—á–µ–π", "–¢—Ä–æ–π–∫–∞ –ú–µ—á–µ–π", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ú–µ—á–µ–π", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ú–µ—á–µ–π", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ú–µ—á–µ–π", "–°–µ–º–µ—Ä–∫–∞ –ú–µ—á–µ–π", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ú–µ—á–µ–π", 
    "–î–µ–≤—è—Ç–∫–∞ –ú–µ—á–µ–π", "–î–µ—Å—è—Ç–∫–∞ –ú–µ—á–µ–π", "–ü–∞–∂ –ú–µ—á–µ–π", "–†—ã—Ü–∞—Ä—å –ú–µ—á–µ–π", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ú–µ—á–µ–π", "–ö–æ—Ä–æ–ª—å –ú–µ—á–µ–π","–¢—É–∑ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–≤–æ–π–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–¢—Ä–æ–π–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ß–µ—Ç–≤–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", 
    "–ü—è—Ç–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–®–µ—Å—Ç–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–°–µ–º–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–í–æ—Å—å–º–µ—Ä–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", 
    "–î–µ–≤—è—Ç–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–î–µ—Å—è—Ç–∫–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ü–∞–∂ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–†—ã—Ü–∞—Ä—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π", 
    "–ö–æ—Ä–æ–ª–µ–≤–∞ –ü–µ–Ω—Ç–∞–∫–ª–µ–π", "–ö–æ—Ä–æ–ª—å –ü–µ–Ω—Ç–∞–∫–ª–µ–π"]
user_histories = {}
user_diaries = {}
user_states = {}

@bot.message_handler(commands=['start'])
async def start(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    help_item = types.KeyboardButton("–ü–æ–º–æ—â—å")
    deck_item = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ")
    dict_item = types.KeyboardButton("–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π")
    donate_item = types.KeyboardButton("–î–æ–Ω–∞—Ç")
    history_item = types.KeyboardButton("–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤")
    diary_item = types.KeyboardButton("–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫")
    diary_view_item = types.KeyboardButton("–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞")
    markup.add(deck_item, dict_item, help_item, donate_item, history_item, diary_item, diary_view_item)
    await bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —è –¢–∞—Ä–æ–ë–æ—Ç!", reply_markup=markup)

@bot.message_handler(func=lambda message: True)
async def handle_message(message):
    user_id = message.chat.id
    if user_states.get(user_id) == "writing_diary":
        await save_diary_entry(message)
        user_states[user_id] = None
        return
    if message.text == "–ü–æ–º–æ—â—å":
        await bot.send_message(message.chat.id,
"""
–¢–∞—Ä–æ–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
—Ä–∞—Å–∫–ª–∞–¥–æ–≤ –¢–∞—Ä–æ.

–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ'.
–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–∏ –∫–∞—Ä—Ç –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É
'–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π'.
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∞—à–µ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤'.
–î–ª—è –∑–∞–ø–∏—Å–∏ –≤ –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫'.
–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –≤ –ª–∏—á–Ω–æ–º –¥–Ω–µ–≤–Ω–∏–∫–µ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞'.
"""
)
    elif message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ":
        cards = random.sample(TAROT_DECK, 3)
        result_message = (f"–í–∞—à —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ:\n1. –ü—Ä–æ—à–ª–æ–µ: {cards[0]}\n"
                          f"2. –ù–∞—Å—Ç–æ—è—â–µ–µ: {cards[1]}\n3. –ë—É–¥—É—â–µ–µ: {cards[2]}")
        await bot.send_message(message.chat.id, result_message)
        if user_id not in user_histories:
            user_histories[user_id] = []
        user_histories[user_id].append(result_message)
        for card in cards:
            card_path = os.path.join(CARDS_FOLDER, f"{card}.jpg")
            if os.path.exists(card_path):
                with open(card_path, 'rb') as photo:
                    await bot.send_photo(message.chat.id, photo)
            else:
                await bot.send_message(message.chat.id, f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫–∞—Ä—Ç—ã '{card}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

        print("–í—ã–∑–æ–≤ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞—Ä—Ç:", cards)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        interpretation = await get_tarot_interpretation_huggingface(cards)
        await bot.send_message(message.chat.id, f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–∞—Å–∫–ª–∞–¥–∞:\n{interpretation}")
        print("–ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:", interpretation)  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    elif message.text == "–°–ø—Ä–∞–≤–æ—á–Ω–∏–∫ —Ç–æ–ª–∫–æ–≤–∞–Ω–∏–π":
        await bot.send_message(message.chat.id, "https://magya-online.ru/znachenie_kart_taro_koshek")
    elif message.text == "–î–æ–Ω–∞—Ç":
        await bot.send_message(message.chat.id,
        "–î–æ—Ä–æ–≥–æ–π –º–æ–π, –ø–æ–º–æ–≥–∏ —Ü—ã–≥–∞–Ω–∫–µ –Ω–∞ —Ö–ª–µ–± –Ω–∞—Å—É—â–Ω—ã–π –∏ —Å—á–∞—Å—Ç—å–µ —Å–µ–±–µ –ø—Ä–∏–≤–ª–µ—á—ë—à—å! üòä\n"
        "–¢—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –ª—é–±—É—é —Å—É–º–º—É –ø–æ —Å—Å—ã–ª–∫–µ: https://donate.example.com")
    elif message.text == "–ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤":
        if user_id in user_histories and user_histories[user_id]:
            history = "\n\n".join(user_histories[user_id])
            await bot.send_message(message.chat.id, f"–í–æ—Ç –≤–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è —Ä–∞—Å–∫–ª–∞–¥–æ–≤:\n\n{history}")
        else:
            await bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å–∫–ª–∞–¥–æ–≤.")
    elif message.text == "–õ–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫":
        await bot.send_message(message.chat.id, "–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –¥–Ω–µ–≤–Ω–∏–∫–∞:")
        user_states[user_id] = "writing_diary"
    elif message.text == "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–Ω–µ–≤–Ω–∏–∫–∞":
        if user_id in user_diaries and user_diaries[user_id]:
            diary_entries = "\n\n".join(user_diaries[user_id])
            await bot.send_message(message.chat.id, f"–í–æ—Ç –≤–∞—à–∏ –∑–∞–ø–∏—Å–∏ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ:\n\n{diary_entries}")
        else:
            await bot.send_message(message.chat.id, "–í–∞—à –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –ø–æ–∫–∞ –ø—É—Å—Ç.")
    else:
        await bot.send_message(message.chat.id,
    "–¢–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é")

async def save_diary_entry(message):
    user_id = message.chat.id
    entry = message.text
    if user_id not in user_diaries:
        user_diaries[user_id] = []
    user_diaries[user_id].append(entry)
    await bot.send_message(message.chat.id, "–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ª–∏—á–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫.")

async def get_tarot_interpretation_huggingface(cards):
    client = Mistral(api_key=MISTRAL_API_KEY)
    chat_response = client.chat.complete(
        model = model,
        messages = [
            {
                "role": "user",
                "content": f"–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π —Ä–∞—Å–∫–ª–∞–¥ –¢–∞—Ä–æ:\n"
                           f"1. –ü—Ä–æ—à–ª–æ–µ: {cards[0]}\n"
                           f"2. –ù–∞—Å—Ç–æ—è—â–µ–µ: {cards[1]}\n"
                           f"3. –ë—É–¥—É—â–µ–µ: {cards[2]}\n"
                           f"–û–±—ä—è—Å–Ω–∏, —á—Ç–æ –º–æ–∂–µ—Ç –∑–Ω–∞—á–∏—Ç—å —ç—Ç–æ—Ç —Ä–∞—Å–∫–ª–∞–¥.",
            }
        ]
    )
    return chat_response.choices[0].message.content
asyncio.run(bot.polling())
